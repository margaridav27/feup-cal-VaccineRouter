Graph CreateTestGraph() {
  Graph myGraph;

  for(int i = 1; i <= 7; i++)
    myGraph.addNode(i, Coordinates(10,5));

  myGraph.addEdge(1, 2, 2);
  myGraph.addEdge(1, 4, 7);
  myGraph.addEdge(2, 4, 3);
  myGraph.addEdge(2, 5, 5);
  myGraph.addEdge(3, 1, 2);
  myGraph.addEdge(3, 6, 5);
  myGraph.addEdge(4, 3, 1);
  myGraph.addEdge(4, 5, 1);
  myGraph.addEdge(4, 6, 6);
  myGraph.addEdge(4, 7, 4);
  myGraph.addEdge(5, 7, 2);
  myGraph.addEdge(6, 4, 3);
  myGraph.addEdge(7, 6, 4);

  return myGraph;
}
int main() {
  Vehicle *vehicleD = new Vehicle();
  Vehicle *vehicleA = new Vehicle();

  Node *orig = new Node(7,Coordinates(10,5));
  Node *dest = new Node(1,Coordinates(10,5));


  AStar(CreateTestGraph(),orig,dest, vehicleA);

  std::cout<< "A Star\n";
  while((dest = vehicleA->getNextNode()) != nullptr ){
   std::cout<< dest->getId() << "  ";
 }

  std::cout<< "\nDjistrka\n";
  dest = new Node(1,Coordinates(10,5));

  dijkstra(CreateTestGraph(),orig,dest, vehicleD);
  while((dest = vehicleD->getNextNode()) != nullptr )
  {
    std::cout<< dest->getId() << "  ";
  }
